// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vine-template-rpc/internal/alarm/data/ent/predicate"
	"vine-template-rpc/internal/alarm/data/ent/rule"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RuleUpdate is the builder for updating Rule entities.
type RuleUpdate struct {
	config
	hooks    []Hook
	mutation *RuleMutation
}

// Where appends a list predicates to the RuleUpdate builder.
func (ru *RuleUpdate) Where(ps ...predicate.Rule) *RuleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RuleUpdate) SetName(s string) *RuleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetType sets the "type" field.
func (ru *RuleUpdate) SetType(s string) *RuleUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetLevel sets the "level" field.
func (ru *RuleUpdate) SetLevel(s string) *RuleUpdate {
	ru.mutation.SetLevel(s)
	return ru
}

// SetContent sets the "content" field.
func (ru *RuleUpdate) SetContent(s string) *RuleUpdate {
	ru.mutation.SetContent(s)
	return ru
}

// SetRemark sets the "remark" field.
func (ru *RuleUpdate) SetRemark(s string) *RuleUpdate {
	ru.mutation.SetRemark(s)
	return ru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableRemark(s *string) *RuleUpdate {
	if s != nil {
		ru.SetRemark(*s)
	}
	return ru
}

// ClearRemark clears the value of the "remark" field.
func (ru *RuleUpdate) ClearRemark() *RuleUpdate {
	ru.mutation.ClearRemark()
	return ru
}

// SetStatus sets the "status" field.
func (ru *RuleUpdate) SetStatus(i int) *RuleUpdate {
	ru.mutation.ResetStatus()
	ru.mutation.SetStatus(i)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableStatus(i *int) *RuleUpdate {
	if i != nil {
		ru.SetStatus(*i)
	}
	return ru
}

// AddStatus adds i to the "status" field.
func (ru *RuleUpdate) AddStatus(i int) *RuleUpdate {
	ru.mutation.AddStatus(i)
	return ru
}

// SetCreateTime sets the "create_time" field.
func (ru *RuleUpdate) SetCreateTime(s string) *RuleUpdate {
	ru.mutation.SetCreateTime(s)
	return ru
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableCreateTime(s *string) *RuleUpdate {
	if s != nil {
		ru.SetCreateTime(*s)
	}
	return ru
}

// ClearCreateTime clears the value of the "create_time" field.
func (ru *RuleUpdate) ClearCreateTime() *RuleUpdate {
	ru.mutation.ClearCreateTime()
	return ru
}

// SetCreator sets the "creator" field.
func (ru *RuleUpdate) SetCreator(s string) *RuleUpdate {
	ru.mutation.SetCreator(s)
	return ru
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableCreator(s *string) *RuleUpdate {
	if s != nil {
		ru.SetCreator(*s)
	}
	return ru
}

// ClearCreator clears the value of the "creator" field.
func (ru *RuleUpdate) ClearCreator() *RuleUpdate {
	ru.mutation.ClearCreator()
	return ru
}

// Mutation returns the RuleMutation object of the builder.
func (ru *RuleUpdate) Mutation() *RuleMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RuleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RuleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RuleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RuleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rule.Table, rule.Columns, sqlgraph.NewFieldSpec(rule.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(rule.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(rule.FieldType, field.TypeString, value)
	}
	if value, ok := ru.mutation.Level(); ok {
		_spec.SetField(rule.FieldLevel, field.TypeString, value)
	}
	if value, ok := ru.mutation.Content(); ok {
		_spec.SetField(rule.FieldContent, field.TypeString, value)
	}
	if value, ok := ru.mutation.Remark(); ok {
		_spec.SetField(rule.FieldRemark, field.TypeString, value)
	}
	if ru.mutation.RemarkCleared() {
		_spec.ClearField(rule.FieldRemark, field.TypeString)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(rule.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedStatus(); ok {
		_spec.AddField(rule.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ru.mutation.CreateTime(); ok {
		_spec.SetField(rule.FieldCreateTime, field.TypeString, value)
	}
	if ru.mutation.CreateTimeCleared() {
		_spec.ClearField(rule.FieldCreateTime, field.TypeString)
	}
	if value, ok := ru.mutation.Creator(); ok {
		_spec.SetField(rule.FieldCreator, field.TypeString, value)
	}
	if ru.mutation.CreatorCleared() {
		_spec.ClearField(rule.FieldCreator, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RuleUpdateOne is the builder for updating a single Rule entity.
type RuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RuleMutation
}

// SetName sets the "name" field.
func (ruo *RuleUpdateOne) SetName(s string) *RuleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetType sets the "type" field.
func (ruo *RuleUpdateOne) SetType(s string) *RuleUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetLevel sets the "level" field.
func (ruo *RuleUpdateOne) SetLevel(s string) *RuleUpdateOne {
	ruo.mutation.SetLevel(s)
	return ruo
}

// SetContent sets the "content" field.
func (ruo *RuleUpdateOne) SetContent(s string) *RuleUpdateOne {
	ruo.mutation.SetContent(s)
	return ruo
}

// SetRemark sets the "remark" field.
func (ruo *RuleUpdateOne) SetRemark(s string) *RuleUpdateOne {
	ruo.mutation.SetRemark(s)
	return ruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableRemark(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetRemark(*s)
	}
	return ruo
}

// ClearRemark clears the value of the "remark" field.
func (ruo *RuleUpdateOne) ClearRemark() *RuleUpdateOne {
	ruo.mutation.ClearRemark()
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RuleUpdateOne) SetStatus(i int) *RuleUpdateOne {
	ruo.mutation.ResetStatus()
	ruo.mutation.SetStatus(i)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableStatus(i *int) *RuleUpdateOne {
	if i != nil {
		ruo.SetStatus(*i)
	}
	return ruo
}

// AddStatus adds i to the "status" field.
func (ruo *RuleUpdateOne) AddStatus(i int) *RuleUpdateOne {
	ruo.mutation.AddStatus(i)
	return ruo
}

// SetCreateTime sets the "create_time" field.
func (ruo *RuleUpdateOne) SetCreateTime(s string) *RuleUpdateOne {
	ruo.mutation.SetCreateTime(s)
	return ruo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableCreateTime(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetCreateTime(*s)
	}
	return ruo
}

// ClearCreateTime clears the value of the "create_time" field.
func (ruo *RuleUpdateOne) ClearCreateTime() *RuleUpdateOne {
	ruo.mutation.ClearCreateTime()
	return ruo
}

// SetCreator sets the "creator" field.
func (ruo *RuleUpdateOne) SetCreator(s string) *RuleUpdateOne {
	ruo.mutation.SetCreator(s)
	return ruo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableCreator(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetCreator(*s)
	}
	return ruo
}

// ClearCreator clears the value of the "creator" field.
func (ruo *RuleUpdateOne) ClearCreator() *RuleUpdateOne {
	ruo.mutation.ClearCreator()
	return ruo
}

// Mutation returns the RuleMutation object of the builder.
func (ruo *RuleUpdateOne) Mutation() *RuleMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RuleUpdate builder.
func (ruo *RuleUpdateOne) Where(ps ...predicate.Rule) *RuleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RuleUpdateOne) Select(field string, fields ...string) *RuleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rule entity.
func (ruo *RuleUpdateOne) Save(ctx context.Context) (*Rule, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RuleUpdateOne) SaveX(ctx context.Context) *Rule {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RuleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RuleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RuleUpdateOne) sqlSave(ctx context.Context) (_node *Rule, err error) {
	_spec := sqlgraph.NewUpdateSpec(rule.Table, rule.Columns, sqlgraph.NewFieldSpec(rule.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rule.FieldID)
		for _, f := range fields {
			if !rule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(rule.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(rule.FieldType, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Level(); ok {
		_spec.SetField(rule.FieldLevel, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Content(); ok {
		_spec.SetField(rule.FieldContent, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Remark(); ok {
		_spec.SetField(rule.FieldRemark, field.TypeString, value)
	}
	if ruo.mutation.RemarkCleared() {
		_spec.ClearField(rule.FieldRemark, field.TypeString)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(rule.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedStatus(); ok {
		_spec.AddField(rule.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.CreateTime(); ok {
		_spec.SetField(rule.FieldCreateTime, field.TypeString, value)
	}
	if ruo.mutation.CreateTimeCleared() {
		_spec.ClearField(rule.FieldCreateTime, field.TypeString)
	}
	if value, ok := ruo.mutation.Creator(); ok {
		_spec.SetField(rule.FieldCreator, field.TypeString, value)
	}
	if ruo.mutation.CreatorCleared() {
		_spec.ClearField(rule.FieldCreator, field.TypeString)
	}
	_node = &Rule{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
