// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vine-template-rpc/internal/emonitor/data/ent/predicate"
	"vine-template-rpc/internal/emonitor/data/ent/site"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SiteUpdate is the builder for updating Site entities.
type SiteUpdate struct {
	config
	hooks    []Hook
	mutation *SiteMutation
}

// Where appends a list predicates to the SiteUpdate builder.
func (su *SiteUpdate) Where(ps ...predicate.Site) *SiteUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SiteUpdate) SetName(s string) *SiteUpdate {
	su.mutation.SetName(s)
	return su
}

// SetType sets the "type" field.
func (su *SiteUpdate) SetType(s string) *SiteUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *SiteUpdate) SetNillableType(s *string) *SiteUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// ClearType clears the value of the "type" field.
func (su *SiteUpdate) ClearType() *SiteUpdate {
	su.mutation.ClearType()
	return su
}

// SetDept sets the "dept" field.
func (su *SiteUpdate) SetDept(s string) *SiteUpdate {
	su.mutation.SetDept(s)
	return su
}

// SetNillableDept sets the "dept" field if the given value is not nil.
func (su *SiteUpdate) SetNillableDept(s *string) *SiteUpdate {
	if s != nil {
		su.SetDept(*s)
	}
	return su
}

// ClearDept clears the value of the "dept" field.
func (su *SiteUpdate) ClearDept() *SiteUpdate {
	su.mutation.ClearDept()
	return su
}

// SetOwner sets the "owner" field.
func (su *SiteUpdate) SetOwner(s string) *SiteUpdate {
	su.mutation.SetOwner(s)
	return su
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (su *SiteUpdate) SetNillableOwner(s *string) *SiteUpdate {
	if s != nil {
		su.SetOwner(*s)
	}
	return su
}

// ClearOwner clears the value of the "owner" field.
func (su *SiteUpdate) ClearOwner() *SiteUpdate {
	su.mutation.ClearOwner()
	return su
}

// SetRemark sets the "remark" field.
func (su *SiteUpdate) SetRemark(s string) *SiteUpdate {
	su.mutation.SetRemark(s)
	return su
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (su *SiteUpdate) SetNillableRemark(s *string) *SiteUpdate {
	if s != nil {
		su.SetRemark(*s)
	}
	return su
}

// ClearRemark clears the value of the "remark" field.
func (su *SiteUpdate) ClearRemark() *SiteUpdate {
	su.mutation.ClearRemark()
	return su
}

// SetLon sets the "lon" field.
func (su *SiteUpdate) SetLon(s string) *SiteUpdate {
	su.mutation.SetLon(s)
	return su
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (su *SiteUpdate) SetNillableLon(s *string) *SiteUpdate {
	if s != nil {
		su.SetLon(*s)
	}
	return su
}

// ClearLon clears the value of the "lon" field.
func (su *SiteUpdate) ClearLon() *SiteUpdate {
	su.mutation.ClearLon()
	return su
}

// SetLat sets the "lat" field.
func (su *SiteUpdate) SetLat(s string) *SiteUpdate {
	su.mutation.SetLat(s)
	return su
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (su *SiteUpdate) SetNillableLat(s *string) *SiteUpdate {
	if s != nil {
		su.SetLat(*s)
	}
	return su
}

// ClearLat clears the value of the "lat" field.
func (su *SiteUpdate) ClearLat() *SiteUpdate {
	su.mutation.ClearLat()
	return su
}

// SetStatus sets the "status" field.
func (su *SiteUpdate) SetStatus(i int) *SiteUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SiteUpdate) SetNillableStatus(i *int) *SiteUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *SiteUpdate) AddStatus(i int) *SiteUpdate {
	su.mutation.AddStatus(i)
	return su
}

// SetAddress sets the "address" field.
func (su *SiteUpdate) SetAddress(s string) *SiteUpdate {
	su.mutation.SetAddress(s)
	return su
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (su *SiteUpdate) SetNillableAddress(s *string) *SiteUpdate {
	if s != nil {
		su.SetAddress(*s)
	}
	return su
}

// ClearAddress clears the value of the "address" field.
func (su *SiteUpdate) ClearAddress() *SiteUpdate {
	su.mutation.ClearAddress()
	return su
}

// SetLastServiceTime sets the "last_service_time" field.
func (su *SiteUpdate) SetLastServiceTime(s string) *SiteUpdate {
	su.mutation.SetLastServiceTime(s)
	return su
}

// SetNillableLastServiceTime sets the "last_service_time" field if the given value is not nil.
func (su *SiteUpdate) SetNillableLastServiceTime(s *string) *SiteUpdate {
	if s != nil {
		su.SetLastServiceTime(*s)
	}
	return su
}

// ClearLastServiceTime clears the value of the "last_service_time" field.
func (su *SiteUpdate) ClearLastServiceTime() *SiteUpdate {
	su.mutation.ClearLastServiceTime()
	return su
}

// SetCreateTime sets the "create_time" field.
func (su *SiteUpdate) SetCreateTime(s string) *SiteUpdate {
	su.mutation.SetCreateTime(s)
	return su
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (su *SiteUpdate) SetNillableCreateTime(s *string) *SiteUpdate {
	if s != nil {
		su.SetCreateTime(*s)
	}
	return su
}

// ClearCreateTime clears the value of the "create_time" field.
func (su *SiteUpdate) ClearCreateTime() *SiteUpdate {
	su.mutation.ClearCreateTime()
	return su
}

// SetCreator sets the "creator" field.
func (su *SiteUpdate) SetCreator(s string) *SiteUpdate {
	su.mutation.SetCreator(s)
	return su
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (su *SiteUpdate) SetNillableCreator(s *string) *SiteUpdate {
	if s != nil {
		su.SetCreator(*s)
	}
	return su
}

// ClearCreator clears the value of the "creator" field.
func (su *SiteUpdate) ClearCreator() *SiteUpdate {
	su.mutation.ClearCreator()
	return su
}

// Mutation returns the SiteMutation object of the builder.
func (su *SiteUpdate) Mutation() *SiteMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SiteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SiteUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SiteUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SiteUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(site.Table, site.Columns, sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(site.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(site.FieldType, field.TypeString, value)
	}
	if su.mutation.TypeCleared() {
		_spec.ClearField(site.FieldType, field.TypeString)
	}
	if value, ok := su.mutation.Dept(); ok {
		_spec.SetField(site.FieldDept, field.TypeString, value)
	}
	if su.mutation.DeptCleared() {
		_spec.ClearField(site.FieldDept, field.TypeString)
	}
	if value, ok := su.mutation.Owner(); ok {
		_spec.SetField(site.FieldOwner, field.TypeString, value)
	}
	if su.mutation.OwnerCleared() {
		_spec.ClearField(site.FieldOwner, field.TypeString)
	}
	if value, ok := su.mutation.Remark(); ok {
		_spec.SetField(site.FieldRemark, field.TypeString, value)
	}
	if su.mutation.RemarkCleared() {
		_spec.ClearField(site.FieldRemark, field.TypeString)
	}
	if value, ok := su.mutation.Lon(); ok {
		_spec.SetField(site.FieldLon, field.TypeString, value)
	}
	if su.mutation.LonCleared() {
		_spec.ClearField(site.FieldLon, field.TypeString)
	}
	if value, ok := su.mutation.Lat(); ok {
		_spec.SetField(site.FieldLat, field.TypeString, value)
	}
	if su.mutation.LatCleared() {
		_spec.ClearField(site.FieldLat, field.TypeString)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(site.FieldStatus, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(site.FieldStatus, field.TypeInt, value)
	}
	if value, ok := su.mutation.Address(); ok {
		_spec.SetField(site.FieldAddress, field.TypeString, value)
	}
	if su.mutation.AddressCleared() {
		_spec.ClearField(site.FieldAddress, field.TypeString)
	}
	if value, ok := su.mutation.LastServiceTime(); ok {
		_spec.SetField(site.FieldLastServiceTime, field.TypeString, value)
	}
	if su.mutation.LastServiceTimeCleared() {
		_spec.ClearField(site.FieldLastServiceTime, field.TypeString)
	}
	if value, ok := su.mutation.CreateTime(); ok {
		_spec.SetField(site.FieldCreateTime, field.TypeString, value)
	}
	if su.mutation.CreateTimeCleared() {
		_spec.ClearField(site.FieldCreateTime, field.TypeString)
	}
	if value, ok := su.mutation.Creator(); ok {
		_spec.SetField(site.FieldCreator, field.TypeString, value)
	}
	if su.mutation.CreatorCleared() {
		_spec.ClearField(site.FieldCreator, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{site.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SiteUpdateOne is the builder for updating a single Site entity.
type SiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteMutation
}

// SetName sets the "name" field.
func (suo *SiteUpdateOne) SetName(s string) *SiteUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetType sets the "type" field.
func (suo *SiteUpdateOne) SetType(s string) *SiteUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableType(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// ClearType clears the value of the "type" field.
func (suo *SiteUpdateOne) ClearType() *SiteUpdateOne {
	suo.mutation.ClearType()
	return suo
}

// SetDept sets the "dept" field.
func (suo *SiteUpdateOne) SetDept(s string) *SiteUpdateOne {
	suo.mutation.SetDept(s)
	return suo
}

// SetNillableDept sets the "dept" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableDept(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetDept(*s)
	}
	return suo
}

// ClearDept clears the value of the "dept" field.
func (suo *SiteUpdateOne) ClearDept() *SiteUpdateOne {
	suo.mutation.ClearDept()
	return suo
}

// SetOwner sets the "owner" field.
func (suo *SiteUpdateOne) SetOwner(s string) *SiteUpdateOne {
	suo.mutation.SetOwner(s)
	return suo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableOwner(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetOwner(*s)
	}
	return suo
}

// ClearOwner clears the value of the "owner" field.
func (suo *SiteUpdateOne) ClearOwner() *SiteUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// SetRemark sets the "remark" field.
func (suo *SiteUpdateOne) SetRemark(s string) *SiteUpdateOne {
	suo.mutation.SetRemark(s)
	return suo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableRemark(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetRemark(*s)
	}
	return suo
}

// ClearRemark clears the value of the "remark" field.
func (suo *SiteUpdateOne) ClearRemark() *SiteUpdateOne {
	suo.mutation.ClearRemark()
	return suo
}

// SetLon sets the "lon" field.
func (suo *SiteUpdateOne) SetLon(s string) *SiteUpdateOne {
	suo.mutation.SetLon(s)
	return suo
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableLon(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetLon(*s)
	}
	return suo
}

// ClearLon clears the value of the "lon" field.
func (suo *SiteUpdateOne) ClearLon() *SiteUpdateOne {
	suo.mutation.ClearLon()
	return suo
}

// SetLat sets the "lat" field.
func (suo *SiteUpdateOne) SetLat(s string) *SiteUpdateOne {
	suo.mutation.SetLat(s)
	return suo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableLat(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetLat(*s)
	}
	return suo
}

// ClearLat clears the value of the "lat" field.
func (suo *SiteUpdateOne) ClearLat() *SiteUpdateOne {
	suo.mutation.ClearLat()
	return suo
}

// SetStatus sets the "status" field.
func (suo *SiteUpdateOne) SetStatus(i int) *SiteUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableStatus(i *int) *SiteUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *SiteUpdateOne) AddStatus(i int) *SiteUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// SetAddress sets the "address" field.
func (suo *SiteUpdateOne) SetAddress(s string) *SiteUpdateOne {
	suo.mutation.SetAddress(s)
	return suo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableAddress(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetAddress(*s)
	}
	return suo
}

// ClearAddress clears the value of the "address" field.
func (suo *SiteUpdateOne) ClearAddress() *SiteUpdateOne {
	suo.mutation.ClearAddress()
	return suo
}

// SetLastServiceTime sets the "last_service_time" field.
func (suo *SiteUpdateOne) SetLastServiceTime(s string) *SiteUpdateOne {
	suo.mutation.SetLastServiceTime(s)
	return suo
}

// SetNillableLastServiceTime sets the "last_service_time" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableLastServiceTime(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetLastServiceTime(*s)
	}
	return suo
}

// ClearLastServiceTime clears the value of the "last_service_time" field.
func (suo *SiteUpdateOne) ClearLastServiceTime() *SiteUpdateOne {
	suo.mutation.ClearLastServiceTime()
	return suo
}

// SetCreateTime sets the "create_time" field.
func (suo *SiteUpdateOne) SetCreateTime(s string) *SiteUpdateOne {
	suo.mutation.SetCreateTime(s)
	return suo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableCreateTime(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetCreateTime(*s)
	}
	return suo
}

// ClearCreateTime clears the value of the "create_time" field.
func (suo *SiteUpdateOne) ClearCreateTime() *SiteUpdateOne {
	suo.mutation.ClearCreateTime()
	return suo
}

// SetCreator sets the "creator" field.
func (suo *SiteUpdateOne) SetCreator(s string) *SiteUpdateOne {
	suo.mutation.SetCreator(s)
	return suo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableCreator(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetCreator(*s)
	}
	return suo
}

// ClearCreator clears the value of the "creator" field.
func (suo *SiteUpdateOne) ClearCreator() *SiteUpdateOne {
	suo.mutation.ClearCreator()
	return suo
}

// Mutation returns the SiteMutation object of the builder.
func (suo *SiteUpdateOne) Mutation() *SiteMutation {
	return suo.mutation
}

// Where appends a list predicates to the SiteUpdate builder.
func (suo *SiteUpdateOne) Where(ps ...predicate.Site) *SiteUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SiteUpdateOne) Select(field string, fields ...string) *SiteUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Site entity.
func (suo *SiteUpdateOne) Save(ctx context.Context) (*Site, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SiteUpdateOne) SaveX(ctx context.Context) *Site {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SiteUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SiteUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SiteUpdateOne) sqlSave(ctx context.Context) (_node *Site, err error) {
	_spec := sqlgraph.NewUpdateSpec(site.Table, site.Columns, sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Site.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, site.FieldID)
		for _, f := range fields {
			if !site.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != site.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(site.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(site.FieldType, field.TypeString, value)
	}
	if suo.mutation.TypeCleared() {
		_spec.ClearField(site.FieldType, field.TypeString)
	}
	if value, ok := suo.mutation.Dept(); ok {
		_spec.SetField(site.FieldDept, field.TypeString, value)
	}
	if suo.mutation.DeptCleared() {
		_spec.ClearField(site.FieldDept, field.TypeString)
	}
	if value, ok := suo.mutation.Owner(); ok {
		_spec.SetField(site.FieldOwner, field.TypeString, value)
	}
	if suo.mutation.OwnerCleared() {
		_spec.ClearField(site.FieldOwner, field.TypeString)
	}
	if value, ok := suo.mutation.Remark(); ok {
		_spec.SetField(site.FieldRemark, field.TypeString, value)
	}
	if suo.mutation.RemarkCleared() {
		_spec.ClearField(site.FieldRemark, field.TypeString)
	}
	if value, ok := suo.mutation.Lon(); ok {
		_spec.SetField(site.FieldLon, field.TypeString, value)
	}
	if suo.mutation.LonCleared() {
		_spec.ClearField(site.FieldLon, field.TypeString)
	}
	if value, ok := suo.mutation.Lat(); ok {
		_spec.SetField(site.FieldLat, field.TypeString, value)
	}
	if suo.mutation.LatCleared() {
		_spec.ClearField(site.FieldLat, field.TypeString)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(site.FieldStatus, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(site.FieldStatus, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Address(); ok {
		_spec.SetField(site.FieldAddress, field.TypeString, value)
	}
	if suo.mutation.AddressCleared() {
		_spec.ClearField(site.FieldAddress, field.TypeString)
	}
	if value, ok := suo.mutation.LastServiceTime(); ok {
		_spec.SetField(site.FieldLastServiceTime, field.TypeString, value)
	}
	if suo.mutation.LastServiceTimeCleared() {
		_spec.ClearField(site.FieldLastServiceTime, field.TypeString)
	}
	if value, ok := suo.mutation.CreateTime(); ok {
		_spec.SetField(site.FieldCreateTime, field.TypeString, value)
	}
	if suo.mutation.CreateTimeCleared() {
		_spec.ClearField(site.FieldCreateTime, field.TypeString)
	}
	if value, ok := suo.mutation.Creator(); ok {
		_spec.SetField(site.FieldCreator, field.TypeString, value)
	}
	if suo.mutation.CreatorCleared() {
		_spec.ClearField(site.FieldCreator, field.TypeString)
	}
	_node = &Site{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{site.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
