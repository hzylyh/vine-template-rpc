// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vine-template-rpc/internal/emonitor/data/ent/site"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SiteCreate is the builder for creating a Site entity.
type SiteCreate struct {
	config
	mutation *SiteMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *SiteCreate) SetName(s string) *SiteCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetType sets the "type" field.
func (sc *SiteCreate) SetType(s string) *SiteCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sc *SiteCreate) SetNillableType(s *string) *SiteCreate {
	if s != nil {
		sc.SetType(*s)
	}
	return sc
}

// SetDept sets the "dept" field.
func (sc *SiteCreate) SetDept(s string) *SiteCreate {
	sc.mutation.SetDept(s)
	return sc
}

// SetNillableDept sets the "dept" field if the given value is not nil.
func (sc *SiteCreate) SetNillableDept(s *string) *SiteCreate {
	if s != nil {
		sc.SetDept(*s)
	}
	return sc
}

// SetOwner sets the "owner" field.
func (sc *SiteCreate) SetOwner(s string) *SiteCreate {
	sc.mutation.SetOwner(s)
	return sc
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (sc *SiteCreate) SetNillableOwner(s *string) *SiteCreate {
	if s != nil {
		sc.SetOwner(*s)
	}
	return sc
}

// SetRemark sets the "remark" field.
func (sc *SiteCreate) SetRemark(s string) *SiteCreate {
	sc.mutation.SetRemark(s)
	return sc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sc *SiteCreate) SetNillableRemark(s *string) *SiteCreate {
	if s != nil {
		sc.SetRemark(*s)
	}
	return sc
}

// SetLon sets the "lon" field.
func (sc *SiteCreate) SetLon(s string) *SiteCreate {
	sc.mutation.SetLon(s)
	return sc
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (sc *SiteCreate) SetNillableLon(s *string) *SiteCreate {
	if s != nil {
		sc.SetLon(*s)
	}
	return sc
}

// SetLat sets the "lat" field.
func (sc *SiteCreate) SetLat(s string) *SiteCreate {
	sc.mutation.SetLat(s)
	return sc
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (sc *SiteCreate) SetNillableLat(s *string) *SiteCreate {
	if s != nil {
		sc.SetLat(*s)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *SiteCreate) SetStatus(i int) *SiteCreate {
	sc.mutation.SetStatus(i)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SiteCreate) SetNillableStatus(i *int) *SiteCreate {
	if i != nil {
		sc.SetStatus(*i)
	}
	return sc
}

// SetAddress sets the "address" field.
func (sc *SiteCreate) SetAddress(s string) *SiteCreate {
	sc.mutation.SetAddress(s)
	return sc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sc *SiteCreate) SetNillableAddress(s *string) *SiteCreate {
	if s != nil {
		sc.SetAddress(*s)
	}
	return sc
}

// SetLastServiceTime sets the "last_service_time" field.
func (sc *SiteCreate) SetLastServiceTime(s string) *SiteCreate {
	sc.mutation.SetLastServiceTime(s)
	return sc
}

// SetNillableLastServiceTime sets the "last_service_time" field if the given value is not nil.
func (sc *SiteCreate) SetNillableLastServiceTime(s *string) *SiteCreate {
	if s != nil {
		sc.SetLastServiceTime(*s)
	}
	return sc
}

// SetCreateTime sets the "create_time" field.
func (sc *SiteCreate) SetCreateTime(s string) *SiteCreate {
	sc.mutation.SetCreateTime(s)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SiteCreate) SetNillableCreateTime(s *string) *SiteCreate {
	if s != nil {
		sc.SetCreateTime(*s)
	}
	return sc
}

// SetCreator sets the "creator" field.
func (sc *SiteCreate) SetCreator(s string) *SiteCreate {
	sc.mutation.SetCreator(s)
	return sc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (sc *SiteCreate) SetNillableCreator(s *string) *SiteCreate {
	if s != nil {
		sc.SetCreator(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SiteCreate) SetID(u uuid.UUID) *SiteCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SiteCreate) SetNillableID(u *uuid.UUID) *SiteCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// Mutation returns the SiteMutation object of the builder.
func (sc *SiteCreate) Mutation() *SiteMutation {
	return sc.mutation
}

// Save creates the Site in the database.
func (sc *SiteCreate) Save(ctx context.Context) (*Site, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SiteCreate) SaveX(ctx context.Context) *Site {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SiteCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SiteCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SiteCreate) defaults() {
	if _, ok := sc.mutation.Status(); !ok {
		v := site.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := site.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SiteCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Site.name"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Site.status"`)}
	}
	return nil
}

func (sc *SiteCreate) sqlSave(ctx context.Context) (*Site, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SiteCreate) createSpec() (*Site, *sqlgraph.CreateSpec) {
	var (
		_node = &Site{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(site.Table, sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(site.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(site.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.Dept(); ok {
		_spec.SetField(site.FieldDept, field.TypeString, value)
		_node.Dept = value
	}
	if value, ok := sc.mutation.Owner(); ok {
		_spec.SetField(site.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := sc.mutation.Remark(); ok {
		_spec.SetField(site.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := sc.mutation.Lon(); ok {
		_spec.SetField(site.FieldLon, field.TypeString, value)
		_node.Lon = value
	}
	if value, ok := sc.mutation.Lat(); ok {
		_spec.SetField(site.FieldLat, field.TypeString, value)
		_node.Lat = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(site.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.Address(); ok {
		_spec.SetField(site.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := sc.mutation.LastServiceTime(); ok {
		_spec.SetField(site.FieldLastServiceTime, field.TypeString, value)
		_node.LastServiceTime = value
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(site.FieldCreateTime, field.TypeString, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.Creator(); ok {
		_spec.SetField(site.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	return _node, _spec
}

// SiteCreateBulk is the builder for creating many Site entities in bulk.
type SiteCreateBulk struct {
	config
	err      error
	builders []*SiteCreate
}

// Save creates the Site entities in the database.
func (scb *SiteCreateBulk) Save(ctx context.Context) ([]*Site, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Site, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SiteCreateBulk) SaveX(ctx context.Context) []*Site {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SiteCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SiteCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
