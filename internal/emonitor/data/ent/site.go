// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"vine-template-rpc/internal/emonitor/data/ent/site"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Site is the model entity for the Site schema.
type Site struct {
	config `json:"-"`
	// ID of the ent.
	// 站点ID
	ID uuid.UUID `json:"id,omitempty"`
	// 站点名称
	Name string `json:"name,omitempty"`
	// 手机号
	Type string `json:"type,omitempty"`
	// 责任部门
	Dept string `json:"dept,omitempty"`
	// 关系责任人
	Owner string `json:"owner,omitempty"`
	// 现场机MN编号
	Remark string `json:"remark,omitempty"`
	// 经度
	Lon string `json:"lon,omitempty"`
	// 纬度
	Lat string `json:"lat,omitempty"`
	// 状态
	Status int `json:"status,omitempty"`
	// 地址
	Address string `json:"address,omitempty"`
	// 最后一次服务时间
	LastServiceTime string `json:"last_service_time,omitempty"`
	// 创建时间
	CreateTime string `json:"create_time,omitempty"`
	// 创建人
	Creator      string `json:"creator,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Site) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case site.FieldStatus:
			values[i] = new(sql.NullInt64)
		case site.FieldName, site.FieldType, site.FieldDept, site.FieldOwner, site.FieldRemark, site.FieldLon, site.FieldLat, site.FieldAddress, site.FieldLastServiceTime, site.FieldCreateTime, site.FieldCreator:
			values[i] = new(sql.NullString)
		case site.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Site fields.
func (s *Site) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case site.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case site.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case site.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = value.String
			}
		case site.FieldDept:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dept", values[i])
			} else if value.Valid {
				s.Dept = value.String
			}
		case site.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				s.Owner = value.String
			}
		case site.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				s.Remark = value.String
			}
		case site.FieldLon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lon", values[i])
			} else if value.Valid {
				s.Lon = value.String
			}
		case site.FieldLat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				s.Lat = value.String
			}
		case site.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = int(value.Int64)
			}
		case site.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				s.Address = value.String
			}
		case site.FieldLastServiceTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_service_time", values[i])
			} else if value.Valid {
				s.LastServiceTime = value.String
			}
		case site.FieldCreateTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.String
			}
		case site.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				s.Creator = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Site.
// This includes values selected through modifiers, order, etc.
func (s *Site) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Site.
// Note that you need to call Site.Unwrap() before calling this method if this Site
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Site) Update() *SiteUpdateOne {
	return NewSiteClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Site entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Site) Unwrap() *Site {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Site is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Site) String() string {
	var builder strings.Builder
	builder.WriteString("Site(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(s.Type)
	builder.WriteString(", ")
	builder.WriteString("dept=")
	builder.WriteString(s.Dept)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(s.Owner)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(s.Remark)
	builder.WriteString(", ")
	builder.WriteString("lon=")
	builder.WriteString(s.Lon)
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(s.Lat)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(s.Address)
	builder.WriteString(", ")
	builder.WriteString("last_service_time=")
	builder.WriteString(s.LastServiceTime)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(s.CreateTime)
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(s.Creator)
	builder.WriteByte(')')
	return builder.String()
}

// Sites is a parsable slice of Site.
type Sites []*Site
