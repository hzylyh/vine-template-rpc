// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vine-template-rpc/internal/emonitor/data/ent/equipment"
	"vine-template-rpc/internal/emonitor/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EquipmentUpdate is the builder for updating Equipment entities.
type EquipmentUpdate struct {
	config
	hooks    []Hook
	mutation *EquipmentMutation
}

// Where appends a list predicates to the EquipmentUpdate builder.
func (eu *EquipmentUpdate) Where(ps ...predicate.Equipment) *EquipmentUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *EquipmentUpdate) SetName(s string) *EquipmentUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableName(s *string) *EquipmentUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// ClearName clears the value of the "name" field.
func (eu *EquipmentUpdate) ClearName() *EquipmentUpdate {
	eu.mutation.ClearName()
	return eu
}

// SetType sets the "type" field.
func (eu *EquipmentUpdate) SetType(s string) *EquipmentUpdate {
	eu.mutation.SetType(s)
	return eu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableType(s *string) *EquipmentUpdate {
	if s != nil {
		eu.SetType(*s)
	}
	return eu
}

// ClearType clears the value of the "type" field.
func (eu *EquipmentUpdate) ClearType() *EquipmentUpdate {
	eu.mutation.ClearType()
	return eu
}

// SetStatus sets the "status" field.
func (eu *EquipmentUpdate) SetStatus(s string) *EquipmentUpdate {
	eu.mutation.SetStatus(s)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableStatus(s *string) *EquipmentUpdate {
	if s != nil {
		eu.SetStatus(*s)
	}
	return eu
}

// ClearStatus clears the value of the "status" field.
func (eu *EquipmentUpdate) ClearStatus() *EquipmentUpdate {
	eu.mutation.ClearStatus()
	return eu
}

// SetRemark sets the "remark" field.
func (eu *EquipmentUpdate) SetRemark(s string) *EquipmentUpdate {
	eu.mutation.SetRemark(s)
	return eu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableRemark(s *string) *EquipmentUpdate {
	if s != nil {
		eu.SetRemark(*s)
	}
	return eu
}

// ClearRemark clears the value of the "remark" field.
func (eu *EquipmentUpdate) ClearRemark() *EquipmentUpdate {
	eu.mutation.ClearRemark()
	return eu
}

// SetLon sets the "lon" field.
func (eu *EquipmentUpdate) SetLon(s string) *EquipmentUpdate {
	eu.mutation.SetLon(s)
	return eu
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableLon(s *string) *EquipmentUpdate {
	if s != nil {
		eu.SetLon(*s)
	}
	return eu
}

// ClearLon clears the value of the "lon" field.
func (eu *EquipmentUpdate) ClearLon() *EquipmentUpdate {
	eu.mutation.ClearLon()
	return eu
}

// SetLat sets the "lat" field.
func (eu *EquipmentUpdate) SetLat(s string) *EquipmentUpdate {
	eu.mutation.SetLat(s)
	return eu
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableLat(s *string) *EquipmentUpdate {
	if s != nil {
		eu.SetLat(*s)
	}
	return eu
}

// ClearLat clears the value of the "lat" field.
func (eu *EquipmentUpdate) ClearLat() *EquipmentUpdate {
	eu.mutation.ClearLat()
	return eu
}

// SetAddress sets the "address" field.
func (eu *EquipmentUpdate) SetAddress(s string) *EquipmentUpdate {
	eu.mutation.SetAddress(s)
	return eu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableAddress(s *string) *EquipmentUpdate {
	if s != nil {
		eu.SetAddress(*s)
	}
	return eu
}

// ClearAddress clears the value of the "address" field.
func (eu *EquipmentUpdate) ClearAddress() *EquipmentUpdate {
	eu.mutation.ClearAddress()
	return eu
}

// SetInstallTime sets the "install_time" field.
func (eu *EquipmentUpdate) SetInstallTime(s string) *EquipmentUpdate {
	eu.mutation.SetInstallTime(s)
	return eu
}

// SetNillableInstallTime sets the "install_time" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableInstallTime(s *string) *EquipmentUpdate {
	if s != nil {
		eu.SetInstallTime(*s)
	}
	return eu
}

// ClearInstallTime clears the value of the "install_time" field.
func (eu *EquipmentUpdate) ClearInstallTime() *EquipmentUpdate {
	eu.mutation.ClearInstallTime()
	return eu
}

// Mutation returns the EquipmentMutation object of the builder.
func (eu *EquipmentUpdate) Mutation() *EquipmentMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EquipmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EquipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EquipmentUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EquipmentUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EquipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(equipment.Table, equipment.Columns, sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(equipment.FieldName, field.TypeString, value)
	}
	if eu.mutation.NameCleared() {
		_spec.ClearField(equipment.FieldName, field.TypeString)
	}
	if value, ok := eu.mutation.GetType(); ok {
		_spec.SetField(equipment.FieldType, field.TypeString, value)
	}
	if eu.mutation.TypeCleared() {
		_spec.ClearField(equipment.FieldType, field.TypeString)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(equipment.FieldStatus, field.TypeString, value)
	}
	if eu.mutation.StatusCleared() {
		_spec.ClearField(equipment.FieldStatus, field.TypeString)
	}
	if value, ok := eu.mutation.Remark(); ok {
		_spec.SetField(equipment.FieldRemark, field.TypeString, value)
	}
	if eu.mutation.RemarkCleared() {
		_spec.ClearField(equipment.FieldRemark, field.TypeString)
	}
	if value, ok := eu.mutation.Lon(); ok {
		_spec.SetField(equipment.FieldLon, field.TypeString, value)
	}
	if eu.mutation.LonCleared() {
		_spec.ClearField(equipment.FieldLon, field.TypeString)
	}
	if value, ok := eu.mutation.Lat(); ok {
		_spec.SetField(equipment.FieldLat, field.TypeString, value)
	}
	if eu.mutation.LatCleared() {
		_spec.ClearField(equipment.FieldLat, field.TypeString)
	}
	if value, ok := eu.mutation.Address(); ok {
		_spec.SetField(equipment.FieldAddress, field.TypeString, value)
	}
	if eu.mutation.AddressCleared() {
		_spec.ClearField(equipment.FieldAddress, field.TypeString)
	}
	if value, ok := eu.mutation.InstallTime(); ok {
		_spec.SetField(equipment.FieldInstallTime, field.TypeString, value)
	}
	if eu.mutation.InstallTimeCleared() {
		_spec.ClearField(equipment.FieldInstallTime, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EquipmentUpdateOne is the builder for updating a single Equipment entity.
type EquipmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EquipmentMutation
}

// SetName sets the "name" field.
func (euo *EquipmentUpdateOne) SetName(s string) *EquipmentUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableName(s *string) *EquipmentUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// ClearName clears the value of the "name" field.
func (euo *EquipmentUpdateOne) ClearName() *EquipmentUpdateOne {
	euo.mutation.ClearName()
	return euo
}

// SetType sets the "type" field.
func (euo *EquipmentUpdateOne) SetType(s string) *EquipmentUpdateOne {
	euo.mutation.SetType(s)
	return euo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableType(s *string) *EquipmentUpdateOne {
	if s != nil {
		euo.SetType(*s)
	}
	return euo
}

// ClearType clears the value of the "type" field.
func (euo *EquipmentUpdateOne) ClearType() *EquipmentUpdateOne {
	euo.mutation.ClearType()
	return euo
}

// SetStatus sets the "status" field.
func (euo *EquipmentUpdateOne) SetStatus(s string) *EquipmentUpdateOne {
	euo.mutation.SetStatus(s)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableStatus(s *string) *EquipmentUpdateOne {
	if s != nil {
		euo.SetStatus(*s)
	}
	return euo
}

// ClearStatus clears the value of the "status" field.
func (euo *EquipmentUpdateOne) ClearStatus() *EquipmentUpdateOne {
	euo.mutation.ClearStatus()
	return euo
}

// SetRemark sets the "remark" field.
func (euo *EquipmentUpdateOne) SetRemark(s string) *EquipmentUpdateOne {
	euo.mutation.SetRemark(s)
	return euo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableRemark(s *string) *EquipmentUpdateOne {
	if s != nil {
		euo.SetRemark(*s)
	}
	return euo
}

// ClearRemark clears the value of the "remark" field.
func (euo *EquipmentUpdateOne) ClearRemark() *EquipmentUpdateOne {
	euo.mutation.ClearRemark()
	return euo
}

// SetLon sets the "lon" field.
func (euo *EquipmentUpdateOne) SetLon(s string) *EquipmentUpdateOne {
	euo.mutation.SetLon(s)
	return euo
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableLon(s *string) *EquipmentUpdateOne {
	if s != nil {
		euo.SetLon(*s)
	}
	return euo
}

// ClearLon clears the value of the "lon" field.
func (euo *EquipmentUpdateOne) ClearLon() *EquipmentUpdateOne {
	euo.mutation.ClearLon()
	return euo
}

// SetLat sets the "lat" field.
func (euo *EquipmentUpdateOne) SetLat(s string) *EquipmentUpdateOne {
	euo.mutation.SetLat(s)
	return euo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableLat(s *string) *EquipmentUpdateOne {
	if s != nil {
		euo.SetLat(*s)
	}
	return euo
}

// ClearLat clears the value of the "lat" field.
func (euo *EquipmentUpdateOne) ClearLat() *EquipmentUpdateOne {
	euo.mutation.ClearLat()
	return euo
}

// SetAddress sets the "address" field.
func (euo *EquipmentUpdateOne) SetAddress(s string) *EquipmentUpdateOne {
	euo.mutation.SetAddress(s)
	return euo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableAddress(s *string) *EquipmentUpdateOne {
	if s != nil {
		euo.SetAddress(*s)
	}
	return euo
}

// ClearAddress clears the value of the "address" field.
func (euo *EquipmentUpdateOne) ClearAddress() *EquipmentUpdateOne {
	euo.mutation.ClearAddress()
	return euo
}

// SetInstallTime sets the "install_time" field.
func (euo *EquipmentUpdateOne) SetInstallTime(s string) *EquipmentUpdateOne {
	euo.mutation.SetInstallTime(s)
	return euo
}

// SetNillableInstallTime sets the "install_time" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableInstallTime(s *string) *EquipmentUpdateOne {
	if s != nil {
		euo.SetInstallTime(*s)
	}
	return euo
}

// ClearInstallTime clears the value of the "install_time" field.
func (euo *EquipmentUpdateOne) ClearInstallTime() *EquipmentUpdateOne {
	euo.mutation.ClearInstallTime()
	return euo
}

// Mutation returns the EquipmentMutation object of the builder.
func (euo *EquipmentUpdateOne) Mutation() *EquipmentMutation {
	return euo.mutation
}

// Where appends a list predicates to the EquipmentUpdate builder.
func (euo *EquipmentUpdateOne) Where(ps ...predicate.Equipment) *EquipmentUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EquipmentUpdateOne) Select(field string, fields ...string) *EquipmentUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Equipment entity.
func (euo *EquipmentUpdateOne) Save(ctx context.Context) (*Equipment, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EquipmentUpdateOne) SaveX(ctx context.Context) *Equipment {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EquipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EquipmentUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EquipmentUpdateOne) sqlSave(ctx context.Context) (_node *Equipment, err error) {
	_spec := sqlgraph.NewUpdateSpec(equipment.Table, equipment.Columns, sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Equipment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, equipment.FieldID)
		for _, f := range fields {
			if !equipment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != equipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(equipment.FieldName, field.TypeString, value)
	}
	if euo.mutation.NameCleared() {
		_spec.ClearField(equipment.FieldName, field.TypeString)
	}
	if value, ok := euo.mutation.GetType(); ok {
		_spec.SetField(equipment.FieldType, field.TypeString, value)
	}
	if euo.mutation.TypeCleared() {
		_spec.ClearField(equipment.FieldType, field.TypeString)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(equipment.FieldStatus, field.TypeString, value)
	}
	if euo.mutation.StatusCleared() {
		_spec.ClearField(equipment.FieldStatus, field.TypeString)
	}
	if value, ok := euo.mutation.Remark(); ok {
		_spec.SetField(equipment.FieldRemark, field.TypeString, value)
	}
	if euo.mutation.RemarkCleared() {
		_spec.ClearField(equipment.FieldRemark, field.TypeString)
	}
	if value, ok := euo.mutation.Lon(); ok {
		_spec.SetField(equipment.FieldLon, field.TypeString, value)
	}
	if euo.mutation.LonCleared() {
		_spec.ClearField(equipment.FieldLon, field.TypeString)
	}
	if value, ok := euo.mutation.Lat(); ok {
		_spec.SetField(equipment.FieldLat, field.TypeString, value)
	}
	if euo.mutation.LatCleared() {
		_spec.ClearField(equipment.FieldLat, field.TypeString)
	}
	if value, ok := euo.mutation.Address(); ok {
		_spec.SetField(equipment.FieldAddress, field.TypeString, value)
	}
	if euo.mutation.AddressCleared() {
		_spec.ClearField(equipment.FieldAddress, field.TypeString)
	}
	if value, ok := euo.mutation.InstallTime(); ok {
		_spec.SetField(equipment.FieldInstallTime, field.TypeString, value)
	}
	if euo.mutation.InstallTimeCleared() {
		_spec.ClearField(equipment.FieldInstallTime, field.TypeString)
	}
	_node = &Equipment{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
