// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"vine-template-rpc/internal/emonitor/data/ent/equipment"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EquipmentCreate is the builder for creating a Equipment entity.
type EquipmentCreate struct {
	config
	mutation *EquipmentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ec *EquipmentCreate) SetName(s string) *EquipmentCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ec *EquipmentCreate) SetNillableName(s *string) *EquipmentCreate {
	if s != nil {
		ec.SetName(*s)
	}
	return ec
}

// SetType sets the "type" field.
func (ec *EquipmentCreate) SetType(s string) *EquipmentCreate {
	ec.mutation.SetType(s)
	return ec
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ec *EquipmentCreate) SetNillableType(s *string) *EquipmentCreate {
	if s != nil {
		ec.SetType(*s)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *EquipmentCreate) SetStatus(s string) *EquipmentCreate {
	ec.mutation.SetStatus(s)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *EquipmentCreate) SetNillableStatus(s *string) *EquipmentCreate {
	if s != nil {
		ec.SetStatus(*s)
	}
	return ec
}

// SetRemark sets the "remark" field.
func (ec *EquipmentCreate) SetRemark(s string) *EquipmentCreate {
	ec.mutation.SetRemark(s)
	return ec
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ec *EquipmentCreate) SetNillableRemark(s *string) *EquipmentCreate {
	if s != nil {
		ec.SetRemark(*s)
	}
	return ec
}

// SetLon sets the "lon" field.
func (ec *EquipmentCreate) SetLon(s string) *EquipmentCreate {
	ec.mutation.SetLon(s)
	return ec
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (ec *EquipmentCreate) SetNillableLon(s *string) *EquipmentCreate {
	if s != nil {
		ec.SetLon(*s)
	}
	return ec
}

// SetLat sets the "lat" field.
func (ec *EquipmentCreate) SetLat(s string) *EquipmentCreate {
	ec.mutation.SetLat(s)
	return ec
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (ec *EquipmentCreate) SetNillableLat(s *string) *EquipmentCreate {
	if s != nil {
		ec.SetLat(*s)
	}
	return ec
}

// SetAddress sets the "address" field.
func (ec *EquipmentCreate) SetAddress(s string) *EquipmentCreate {
	ec.mutation.SetAddress(s)
	return ec
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ec *EquipmentCreate) SetNillableAddress(s *string) *EquipmentCreate {
	if s != nil {
		ec.SetAddress(*s)
	}
	return ec
}

// SetInstallTime sets the "install_time" field.
func (ec *EquipmentCreate) SetInstallTime(s string) *EquipmentCreate {
	ec.mutation.SetInstallTime(s)
	return ec
}

// SetNillableInstallTime sets the "install_time" field if the given value is not nil.
func (ec *EquipmentCreate) SetNillableInstallTime(s *string) *EquipmentCreate {
	if s != nil {
		ec.SetInstallTime(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EquipmentCreate) SetID(u uuid.UUID) *EquipmentCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EquipmentCreate) SetNillableID(u *uuid.UUID) *EquipmentCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// Mutation returns the EquipmentMutation object of the builder.
func (ec *EquipmentCreate) Mutation() *EquipmentMutation {
	return ec.mutation
}

// Save creates the Equipment in the database.
func (ec *EquipmentCreate) Save(ctx context.Context) (*Equipment, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EquipmentCreate) SaveX(ctx context.Context) *Equipment {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EquipmentCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EquipmentCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EquipmentCreate) defaults() {
	if _, ok := ec.mutation.ID(); !ok {
		v := equipment.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EquipmentCreate) check() error {
	return nil
}

func (ec *EquipmentCreate) sqlSave(ctx context.Context) (*Equipment, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EquipmentCreate) createSpec() (*Equipment, *sqlgraph.CreateSpec) {
	var (
		_node = &Equipment{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(equipment.Table, sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(equipment.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.GetType(); ok {
		_spec.SetField(equipment.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(equipment.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.Remark(); ok {
		_spec.SetField(equipment.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ec.mutation.Lon(); ok {
		_spec.SetField(equipment.FieldLon, field.TypeString, value)
		_node.Lon = value
	}
	if value, ok := ec.mutation.Lat(); ok {
		_spec.SetField(equipment.FieldLat, field.TypeString, value)
		_node.Lat = value
	}
	if value, ok := ec.mutation.Address(); ok {
		_spec.SetField(equipment.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ec.mutation.InstallTime(); ok {
		_spec.SetField(equipment.FieldInstallTime, field.TypeString, value)
		_node.InstallTime = value
	}
	return _node, _spec
}

// EquipmentCreateBulk is the builder for creating many Equipment entities in bulk.
type EquipmentCreateBulk struct {
	config
	err      error
	builders []*EquipmentCreate
}

// Save creates the Equipment entities in the database.
func (ecb *EquipmentCreateBulk) Save(ctx context.Context) ([]*Equipment, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Equipment, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EquipmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EquipmentCreateBulk) SaveX(ctx context.Context) []*Equipment {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EquipmentCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EquipmentCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
