// Code generated by ent, DO NOT EDIT.

package site

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the site type in the database.
	Label = "site"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDept holds the string denoting the dept field in the database.
	FieldDept = "dept"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldLon holds the string denoting the lon field in the database.
	FieldLon = "lon"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldLastServiceTime holds the string denoting the last_service_time field in the database.
	FieldLastServiceTime = "last_service_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// Table holds the table name of the site in the database.
	Table = "tb_site"
)

// Columns holds all SQL columns for site fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldDept,
	FieldOwner,
	FieldRemark,
	FieldLon,
	FieldLat,
	FieldStatus,
	FieldAddress,
	FieldLastServiceTime,
	FieldCreateTime,
	FieldCreator,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Site queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDept orders the results by the dept field.
func ByDept(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDept, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByLon orders the results by the lon field.
func ByLon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLon, opts...).ToFunc()
}

// ByLat orders the results by the lat field.
func ByLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLat, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByLastServiceTime orders the results by the last_service_time field.
func ByLastServiceTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastServiceTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}
