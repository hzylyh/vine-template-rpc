// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: emonitor/v1/emonitor.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	page "vine-template-rpc/internal/page"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Emonitor_AddSite_FullMethodName    = "/api.emonitor.v1.Emonitor/AddSite"
	Emonitor_UpdateSite_FullMethodName = "/api.emonitor.v1.Emonitor/UpdateSite"
	Emonitor_DeleteSite_FullMethodName = "/api.emonitor.v1.Emonitor/DeleteSite"
	Emonitor_GetSite_FullMethodName    = "/api.emonitor.v1.Emonitor/GetSite"
	Emonitor_ListSite_FullMethodName   = "/api.emonitor.v1.Emonitor/ListSite"
)

// EmonitorClient is the client API for Emonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmonitorClient interface {
	AddSite(ctx context.Context, in *AddSiteRequest, opts ...grpc.CallOption) (*AddSiteReply, error)
	UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*UpdateSiteReply, error)
	DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*DeleteSiteReply, error)
	GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*GetSiteReply, error)
	ListSite(ctx context.Context, in *ListSiteRequest, opts ...grpc.CallOption) (*page.Page, error)
}

type emonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewEmonitorClient(cc grpc.ClientConnInterface) EmonitorClient {
	return &emonitorClient{cc}
}

func (c *emonitorClient) AddSite(ctx context.Context, in *AddSiteRequest, opts ...grpc.CallOption) (*AddSiteReply, error) {
	out := new(AddSiteReply)
	err := c.cc.Invoke(ctx, Emonitor_AddSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emonitorClient) UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*UpdateSiteReply, error) {
	out := new(UpdateSiteReply)
	err := c.cc.Invoke(ctx, Emonitor_UpdateSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emonitorClient) DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*DeleteSiteReply, error) {
	out := new(DeleteSiteReply)
	err := c.cc.Invoke(ctx, Emonitor_DeleteSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emonitorClient) GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*GetSiteReply, error) {
	out := new(GetSiteReply)
	err := c.cc.Invoke(ctx, Emonitor_GetSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emonitorClient) ListSite(ctx context.Context, in *ListSiteRequest, opts ...grpc.CallOption) (*page.Page, error) {
	out := new(page.Page)
	err := c.cc.Invoke(ctx, Emonitor_ListSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmonitorServer is the server API for Emonitor service.
// All implementations must embed UnimplementedEmonitorServer
// for forward compatibility
type EmonitorServer interface {
	AddSite(context.Context, *AddSiteRequest) (*AddSiteReply, error)
	UpdateSite(context.Context, *UpdateSiteRequest) (*UpdateSiteReply, error)
	DeleteSite(context.Context, *DeleteSiteRequest) (*DeleteSiteReply, error)
	GetSite(context.Context, *GetSiteRequest) (*GetSiteReply, error)
	ListSite(context.Context, *ListSiteRequest) (*page.Page, error)
	mustEmbedUnimplementedEmonitorServer()
}

// UnimplementedEmonitorServer must be embedded to have forward compatible implementations.
type UnimplementedEmonitorServer struct {
}

func (UnimplementedEmonitorServer) AddSite(context.Context, *AddSiteRequest) (*AddSiteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSite not implemented")
}
func (UnimplementedEmonitorServer) UpdateSite(context.Context, *UpdateSiteRequest) (*UpdateSiteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSite not implemented")
}
func (UnimplementedEmonitorServer) DeleteSite(context.Context, *DeleteSiteRequest) (*DeleteSiteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSite not implemented")
}
func (UnimplementedEmonitorServer) GetSite(context.Context, *GetSiteRequest) (*GetSiteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSite not implemented")
}
func (UnimplementedEmonitorServer) ListSite(context.Context, *ListSiteRequest) (*page.Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSite not implemented")
}
func (UnimplementedEmonitorServer) mustEmbedUnimplementedEmonitorServer() {}

// UnsafeEmonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmonitorServer will
// result in compilation errors.
type UnsafeEmonitorServer interface {
	mustEmbedUnimplementedEmonitorServer()
}

func RegisterEmonitorServer(s grpc.ServiceRegistrar, srv EmonitorServer) {
	s.RegisterService(&Emonitor_ServiceDesc, srv)
}

func _Emonitor_AddSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmonitorServer).AddSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emonitor_AddSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmonitorServer).AddSite(ctx, req.(*AddSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emonitor_UpdateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmonitorServer).UpdateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emonitor_UpdateSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmonitorServer).UpdateSite(ctx, req.(*UpdateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emonitor_DeleteSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmonitorServer).DeleteSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emonitor_DeleteSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmonitorServer).DeleteSite(ctx, req.(*DeleteSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emonitor_GetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmonitorServer).GetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emonitor_GetSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmonitorServer).GetSite(ctx, req.(*GetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emonitor_ListSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmonitorServer).ListSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emonitor_ListSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmonitorServer).ListSite(ctx, req.(*ListSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Emonitor_ServiceDesc is the grpc.ServiceDesc for Emonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Emonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.emonitor.v1.Emonitor",
	HandlerType: (*EmonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSite",
			Handler:    _Emonitor_AddSite_Handler,
		},
		{
			MethodName: "UpdateSite",
			Handler:    _Emonitor_UpdateSite_Handler,
		},
		{
			MethodName: "DeleteSite",
			Handler:    _Emonitor_DeleteSite_Handler,
		},
		{
			MethodName: "GetSite",
			Handler:    _Emonitor_GetSite_Handler,
		},
		{
			MethodName: "ListSite",
			Handler:    _Emonitor_ListSite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emonitor/v1/emonitor.proto",
}
