// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: cms/v1/cms.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cms_CreateCms_FullMethodName = "/api.cms.v1.Cms/CreateCms"
	Cms_UpdateCms_FullMethodName = "/api.cms.v1.Cms/UpdateCms"
	Cms_DeleteCms_FullMethodName = "/api.cms.v1.Cms/DeleteCms"
	Cms_GetCms_FullMethodName    = "/api.cms.v1.Cms/GetCms"
	Cms_ListCms_FullMethodName   = "/api.cms.v1.Cms/ListCms"
)

// CmsClient is the client API for Cms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmsClient interface {
	CreateCms(ctx context.Context, in *CreateCmsRequest, opts ...grpc.CallOption) (*CreateCmsReply, error)
	UpdateCms(ctx context.Context, in *UpdateCmsRequest, opts ...grpc.CallOption) (*UpdateCmsReply, error)
	DeleteCms(ctx context.Context, in *DeleteCmsRequest, opts ...grpc.CallOption) (*DeleteCmsReply, error)
	GetCms(ctx context.Context, in *GetCmsRequest, opts ...grpc.CallOption) (*GetCmsReply, error)
	ListCms(ctx context.Context, in *ListCmsRequest, opts ...grpc.CallOption) (*ListCmsReply, error)
}

type cmsClient struct {
	cc grpc.ClientConnInterface
}

func NewCmsClient(cc grpc.ClientConnInterface) CmsClient {
	return &cmsClient{cc}
}

func (c *cmsClient) CreateCms(ctx context.Context, in *CreateCmsRequest, opts ...grpc.CallOption) (*CreateCmsReply, error) {
	out := new(CreateCmsReply)
	err := c.cc.Invoke(ctx, Cms_CreateCms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UpdateCms(ctx context.Context, in *UpdateCmsRequest, opts ...grpc.CallOption) (*UpdateCmsReply, error) {
	out := new(UpdateCmsReply)
	err := c.cc.Invoke(ctx, Cms_UpdateCms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DeleteCms(ctx context.Context, in *DeleteCmsRequest, opts ...grpc.CallOption) (*DeleteCmsReply, error) {
	out := new(DeleteCmsReply)
	err := c.cc.Invoke(ctx, Cms_DeleteCms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetCms(ctx context.Context, in *GetCmsRequest, opts ...grpc.CallOption) (*GetCmsReply, error) {
	out := new(GetCmsReply)
	err := c.cc.Invoke(ctx, Cms_GetCms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) ListCms(ctx context.Context, in *ListCmsRequest, opts ...grpc.CallOption) (*ListCmsReply, error) {
	out := new(ListCmsReply)
	err := c.cc.Invoke(ctx, Cms_ListCms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmsServer is the server API for Cms service.
// All implementations must embed UnimplementedCmsServer
// for forward compatibility
type CmsServer interface {
	CreateCms(context.Context, *CreateCmsRequest) (*CreateCmsReply, error)
	UpdateCms(context.Context, *UpdateCmsRequest) (*UpdateCmsReply, error)
	DeleteCms(context.Context, *DeleteCmsRequest) (*DeleteCmsReply, error)
	GetCms(context.Context, *GetCmsRequest) (*GetCmsReply, error)
	ListCms(context.Context, *ListCmsRequest) (*ListCmsReply, error)
	mustEmbedUnimplementedCmsServer()
}

// UnimplementedCmsServer must be embedded to have forward compatible implementations.
type UnimplementedCmsServer struct {
}

func (UnimplementedCmsServer) CreateCms(context.Context, *CreateCmsRequest) (*CreateCmsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCms not implemented")
}
func (UnimplementedCmsServer) UpdateCms(context.Context, *UpdateCmsRequest) (*UpdateCmsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCms not implemented")
}
func (UnimplementedCmsServer) DeleteCms(context.Context, *DeleteCmsRequest) (*DeleteCmsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCms not implemented")
}
func (UnimplementedCmsServer) GetCms(context.Context, *GetCmsRequest) (*GetCmsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCms not implemented")
}
func (UnimplementedCmsServer) ListCms(context.Context, *ListCmsRequest) (*ListCmsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCms not implemented")
}
func (UnimplementedCmsServer) mustEmbedUnimplementedCmsServer() {}

// UnsafeCmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmsServer will
// result in compilation errors.
type UnsafeCmsServer interface {
	mustEmbedUnimplementedCmsServer()
}

func RegisterCmsServer(s grpc.ServiceRegistrar, srv CmsServer) {
	s.RegisterService(&Cms_ServiceDesc, srv)
}

func _Cms_CreateCms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).CreateCms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_CreateCms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).CreateCms(ctx, req.(*CreateCmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UpdateCms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UpdateCms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_UpdateCms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UpdateCms(ctx, req.(*UpdateCmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DeleteCms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DeleteCms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_DeleteCms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DeleteCms(ctx, req.(*DeleteCmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetCms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetCms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_GetCms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetCms(ctx, req.(*GetCmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_ListCms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).ListCms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_ListCms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).ListCms(ctx, req.(*ListCmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cms_ServiceDesc is the grpc.ServiceDesc for Cms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.cms.v1.Cms",
	HandlerType: (*CmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCms",
			Handler:    _Cms_CreateCms_Handler,
		},
		{
			MethodName: "UpdateCms",
			Handler:    _Cms_UpdateCms_Handler,
		},
		{
			MethodName: "DeleteCms",
			Handler:    _Cms_DeleteCms_Handler,
		},
		{
			MethodName: "GetCms",
			Handler:    _Cms_GetCms_Handler,
		},
		{
			MethodName: "ListCms",
			Handler:    _Cms_ListCms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms/v1/cms.proto",
}
