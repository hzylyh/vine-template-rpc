// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.1
// source: alarm/v1/alarm.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAlarmAddAlarmRule = "/api.alarm.v1.Alarm/AddAlarmRule"
const OperationAlarmTrigger = "/api.alarm.v1.Alarm/Trigger"

type AlarmHTTPServer interface {
	AddAlarmRule(context.Context, *AddAlarmRuleRequest) (*AddAlarmRuleReply, error)
	Trigger(context.Context, *TriggerRequest) (*TriggerReply, error)
}

func RegisterAlarmHTTPServer(s *http.Server, srv AlarmHTTPServer) {
	r := s.Route("/")
	r.POST("/alarm/rule/add", _Alarm_AddAlarmRule0_HTTP_Handler(srv))
	r.POST("/alarm/trigger", _Alarm_Trigger0_HTTP_Handler(srv))
}

func _Alarm_AddAlarmRule0_HTTP_Handler(srv AlarmHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAlarmRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmAddAlarmRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAlarmRule(ctx, req.(*AddAlarmRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAlarmRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Alarm_Trigger0_HTTP_Handler(srv AlarmHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TriggerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmTrigger)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Trigger(ctx, req.(*TriggerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TriggerReply)
		return ctx.Result(200, reply)
	}
}

type AlarmHTTPClient interface {
	AddAlarmRule(ctx context.Context, req *AddAlarmRuleRequest, opts ...http.CallOption) (rsp *AddAlarmRuleReply, err error)
	Trigger(ctx context.Context, req *TriggerRequest, opts ...http.CallOption) (rsp *TriggerReply, err error)
}

type AlarmHTTPClientImpl struct {
	cc *http.Client
}

func NewAlarmHTTPClient(client *http.Client) AlarmHTTPClient {
	return &AlarmHTTPClientImpl{client}
}

func (c *AlarmHTTPClientImpl) AddAlarmRule(ctx context.Context, in *AddAlarmRuleRequest, opts ...http.CallOption) (*AddAlarmRuleReply, error) {
	var out AddAlarmRuleReply
	pattern := "/alarm/rule/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlarmAddAlarmRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlarmHTTPClientImpl) Trigger(ctx context.Context, in *TriggerRequest, opts ...http.CallOption) (*TriggerReply, error) {
	var out TriggerReply
	pattern := "/alarm/trigger"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlarmTrigger))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
