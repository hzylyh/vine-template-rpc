// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: alarm/v1/alarm.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Alarm_AddAlarmRule_FullMethodName = "/api.alarm.v1.Alarm/AddAlarmRule"
	Alarm_UpdateAlarm_FullMethodName  = "/api.alarm.v1.Alarm/UpdateAlarm"
	Alarm_DeleteAlarm_FullMethodName  = "/api.alarm.v1.Alarm/DeleteAlarm"
	Alarm_GetAlarm_FullMethodName     = "/api.alarm.v1.Alarm/GetAlarm"
	Alarm_ListAlarm_FullMethodName    = "/api.alarm.v1.Alarm/ListAlarm"
	Alarm_Trigger_FullMethodName      = "/api.alarm.v1.Alarm/Trigger"
)

// AlarmClient is the client API for Alarm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlarmClient interface {
	AddAlarmRule(ctx context.Context, in *AddAlarmRuleRequest, opts ...grpc.CallOption) (*AddAlarmRuleReply, error)
	UpdateAlarm(ctx context.Context, in *UpdateAlarmRequest, opts ...grpc.CallOption) (*UpdateAlarmReply, error)
	DeleteAlarm(ctx context.Context, in *DeleteAlarmRequest, opts ...grpc.CallOption) (*DeleteAlarmReply, error)
	GetAlarm(ctx context.Context, in *GetAlarmRequest, opts ...grpc.CallOption) (*GetAlarmReply, error)
	ListAlarm(ctx context.Context, in *ListAlarmRequest, opts ...grpc.CallOption) (*ListAlarmReply, error)
	Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerReply, error)
}

type alarmClient struct {
	cc grpc.ClientConnInterface
}

func NewAlarmClient(cc grpc.ClientConnInterface) AlarmClient {
	return &alarmClient{cc}
}

func (c *alarmClient) AddAlarmRule(ctx context.Context, in *AddAlarmRuleRequest, opts ...grpc.CallOption) (*AddAlarmRuleReply, error) {
	out := new(AddAlarmRuleReply)
	err := c.cc.Invoke(ctx, Alarm_AddAlarmRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmClient) UpdateAlarm(ctx context.Context, in *UpdateAlarmRequest, opts ...grpc.CallOption) (*UpdateAlarmReply, error) {
	out := new(UpdateAlarmReply)
	err := c.cc.Invoke(ctx, Alarm_UpdateAlarm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmClient) DeleteAlarm(ctx context.Context, in *DeleteAlarmRequest, opts ...grpc.CallOption) (*DeleteAlarmReply, error) {
	out := new(DeleteAlarmReply)
	err := c.cc.Invoke(ctx, Alarm_DeleteAlarm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmClient) GetAlarm(ctx context.Context, in *GetAlarmRequest, opts ...grpc.CallOption) (*GetAlarmReply, error) {
	out := new(GetAlarmReply)
	err := c.cc.Invoke(ctx, Alarm_GetAlarm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmClient) ListAlarm(ctx context.Context, in *ListAlarmRequest, opts ...grpc.CallOption) (*ListAlarmReply, error) {
	out := new(ListAlarmReply)
	err := c.cc.Invoke(ctx, Alarm_ListAlarm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmClient) Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerReply, error) {
	out := new(TriggerReply)
	err := c.cc.Invoke(ctx, Alarm_Trigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlarmServer is the server API for Alarm service.
// All implementations must embed UnimplementedAlarmServer
// for forward compatibility
type AlarmServer interface {
	AddAlarmRule(context.Context, *AddAlarmRuleRequest) (*AddAlarmRuleReply, error)
	UpdateAlarm(context.Context, *UpdateAlarmRequest) (*UpdateAlarmReply, error)
	DeleteAlarm(context.Context, *DeleteAlarmRequest) (*DeleteAlarmReply, error)
	GetAlarm(context.Context, *GetAlarmRequest) (*GetAlarmReply, error)
	ListAlarm(context.Context, *ListAlarmRequest) (*ListAlarmReply, error)
	Trigger(context.Context, *TriggerRequest) (*TriggerReply, error)
	mustEmbedUnimplementedAlarmServer()
}

// UnimplementedAlarmServer must be embedded to have forward compatible implementations.
type UnimplementedAlarmServer struct {
}

func (UnimplementedAlarmServer) AddAlarmRule(context.Context, *AddAlarmRuleRequest) (*AddAlarmRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAlarmRule not implemented")
}
func (UnimplementedAlarmServer) UpdateAlarm(context.Context, *UpdateAlarmRequest) (*UpdateAlarmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlarm not implemented")
}
func (UnimplementedAlarmServer) DeleteAlarm(context.Context, *DeleteAlarmRequest) (*DeleteAlarmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlarm not implemented")
}
func (UnimplementedAlarmServer) GetAlarm(context.Context, *GetAlarmRequest) (*GetAlarmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlarm not implemented")
}
func (UnimplementedAlarmServer) ListAlarm(context.Context, *ListAlarmRequest) (*ListAlarmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlarm not implemented")
}
func (UnimplementedAlarmServer) Trigger(context.Context, *TriggerRequest) (*TriggerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trigger not implemented")
}
func (UnimplementedAlarmServer) mustEmbedUnimplementedAlarmServer() {}

// UnsafeAlarmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlarmServer will
// result in compilation errors.
type UnsafeAlarmServer interface {
	mustEmbedUnimplementedAlarmServer()
}

func RegisterAlarmServer(s grpc.ServiceRegistrar, srv AlarmServer) {
	s.RegisterService(&Alarm_ServiceDesc, srv)
}

func _Alarm_AddAlarmRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAlarmRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServer).AddAlarmRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alarm_AddAlarmRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServer).AddAlarmRule(ctx, req.(*AddAlarmRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alarm_UpdateAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServer).UpdateAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alarm_UpdateAlarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServer).UpdateAlarm(ctx, req.(*UpdateAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alarm_DeleteAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServer).DeleteAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alarm_DeleteAlarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServer).DeleteAlarm(ctx, req.(*DeleteAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alarm_GetAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServer).GetAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alarm_GetAlarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServer).GetAlarm(ctx, req.(*GetAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alarm_ListAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServer).ListAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alarm_ListAlarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServer).ListAlarm(ctx, req.(*ListAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alarm_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alarm_Trigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServer).Trigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Alarm_ServiceDesc is the grpc.ServiceDesc for Alarm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Alarm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.alarm.v1.Alarm",
	HandlerType: (*AlarmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAlarmRule",
			Handler:    _Alarm_AddAlarmRule_Handler,
		},
		{
			MethodName: "UpdateAlarm",
			Handler:    _Alarm_UpdateAlarm_Handler,
		},
		{
			MethodName: "DeleteAlarm",
			Handler:    _Alarm_DeleteAlarm_Handler,
		},
		{
			MethodName: "GetAlarm",
			Handler:    _Alarm_GetAlarm_Handler,
		},
		{
			MethodName: "ListAlarm",
			Handler:    _Alarm_ListAlarm_Handler,
		},
		{
			MethodName: "Trigger",
			Handler:    _Alarm_Trigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alarm/v1/alarm.proto",
}
