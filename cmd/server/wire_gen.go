// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	biz3 "vine-template-rpc/internal/alarm/biz"
	service3 "vine-template-rpc/internal/alarm/service"
	"vine-template-rpc/internal/authz"
	"vine-template-rpc/internal/conf"
	biz2 "vine-template-rpc/internal/emonitor/biz"
	data2 "vine-template-rpc/internal/emonitor/data"
	service2 "vine-template-rpc/internal/emonitor/service"
	"vine-template-rpc/internal/server"
	"vine-template-rpc/internal/system/biz"
	"vine-template-rpc/internal/system/data"
	"vine-template-rpc/internal/system/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	client := data.NewEntClient(confData, logger)
	dataData, cleanup, err := data.NewData(client, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userBiz := biz.NewUserBiz(userRepo, logger)
	authBiz := biz.NewAuthBiz(userRepo, logger)
	roleRepo := data.NewRoleRepo(dataData, logger)
	enforcer := authz.NewAuthz(confData)
	roleBiz := biz.NewRoleBiz(roleRepo, userRepo, enforcer, logger)
	permBiz := biz.NewPermBiz(enforcer, logger)
	systemService := service.NewSystemService(userBiz, authBiz, roleBiz, permBiz)
	dialector := data2.NewMysqlDialector(confData)
	db := data2.NewGormDB(dialector, logger)
	data3, cleanup2, err := data2.NewData(db, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	siteRepo := data2.NewSiteRepo(data3, logger)
	siteBiz := biz2.NewSiteBiz(siteRepo, logger)
	eMonitorService := service2.NewEMonitorService(siteBiz)
	engineBiz := biz3.NewEnginBiz(logger)
	ruleBiz := biz3.NewRuleBiz(logger)
	alarmService := service3.NewAlarmService(engineBiz, ruleBiz)
	grpcServer := server.NewGRPCServer(confServer, systemService, eMonitorService, alarmService, logger, enforcer)
	httpServer := server.NewHTTPServer(confServer, systemService, eMonitorService, alarmService, logger, enforcer)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
